package render

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
)

// ---------------------------------------------------------------------

// -- renderTemplate renders an HTML template to the provided http.ResponseWriter.
func RenderTemplateTest(w http.ResponseWriter, tmpl string) {

	// -- Parse the HTML template file located in the "templates" directory.
	parsedTemplate, _ := template.ParseFiles("./resources/templates/"+tmpl, "./resources/templates/layouts/base.layout.html")

	// -- Execute the parsed template, writing the output to the http.ResponseWriter.
	err := parsedTemplate.Execute(w, nil)

	if err != nil {
		fmt.Println("error parsing template", err)
		return
	}
}

// ---------------------------------------------------------------------

// -- tempCache is a map used to store compiled templates.
var (
	tempCache = make(map[string]*template.Template)
)

// -- RenderTemplate renders a template to the provided http.ResponseWriter.
func RenderTemplate(w http.ResponseWriter, t string) {
	var tmpl *template.Template
	var err error

	// -- Check to see if we already have the template in our cache.
	tmpl, inMap := tempCache[t]

	if !inMap {
		log.Println("-> creating template and adding to cache")
		err = createTemplateCache(t)
		if err != nil {
			log.Println(err)
		}
		// -- Retrieve the template from the cache.
		tmpl = tempCache[t]
	} else {
		log.Println("using cached template")
	}

	// -- Execute the template.
	err = tmpl.Execute(w, nil)

	if err != nil {
		log.Println(err)
	}
}

// -- createTemplateCache creates and caches the template with the given name.
func createTemplateCache(t string) error {
	templates := []string{
		fmt.Sprintf("./resources/templates/%s", t),       // -- Path to the specific template.
		"./resources/templates/layouts/base.layout.html", // -- Path to the base layout.
	}

	// -- Parse the template.
	tmpl, err := template.ParseFiles(templates...)

	if err != nil {
		return err
	}

	// -- Add the template to the cache (map).
	tempCache[t] = tmpl
	return nil
}

// ---------------------------------------------------------------------
