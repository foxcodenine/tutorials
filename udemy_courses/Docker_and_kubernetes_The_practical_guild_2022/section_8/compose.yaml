services:
    server:
        # image: 'nginx:stable-alpine'
        build:
            context: .
            dockerfile: dockerfiles/nginx.dockerfile
        ports:
            - '8080:80'
        volumes:
            - ./src:/var/www/html
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - php
            - mysql
    php:
        build:
            context: .
            dockerfile: dockerfiles/php.dockerfile
        volumes:
            - ./src:/var/www/html:delegated
    mysql:
        image: mysql:5.7
        env_file:
            - ./env/mysql.env
    composer:
        build:
            context: ./dockerfiles
            dockerfile: composer.dockerfile
        volumes:
            - ./src:/var/www/html
    artisan:
        build:
            context: .
            dockerfile: dockerfiles/php.dockerfile
        volumes:
            - ./src:/var/www/html
        entrypoint: ['php', '/var/www/html/artisan']
    npm:
        image: node:14
        working_dir: /var/www/html
        entrypoint: ['npm']
        volumes:
            - ./src:/var/www/html



# https://www.cloudreach.com/en/technical-blog/containerize-this-how-to-use-php-apache-mysql-within-docker-containers/

# Creating an Apache container:
# run -dit --name my-apache-app -p 8080:80 -v "$PWD":/usr/local/apache2/htdocs/ httpd:2.4

# With service composer create a new laravel project in the working directory that is bind to src folder:
# docker-compose run --rm composer create-project --prefer-dist laravel/laravel .
# docker-compose run --rm composer create-project --prefer-dist laravel/laravel . 8.0.0

# docker-compose up -d  server php mysql

