{{ define "base" }}
<!DOCTYPE html>
<html lang="en">

<!-- head -->

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>This is the title of the page</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">

    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">

    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <link rel="stylesheet" href="/static/css/styles.css">
    {{ block "css" . }}{{ end }}

</head>

<!-- body -->

<body>

    <!-- nav -->
    {{ template "nav" . }}

    <!-- content -->
    {{ block "content" . }}{{ end }}

    <!-- footer -->
    {{ template "footer" . }}

    <!-- scripts ------------------------------------------------------>
    
    <!-- bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous">
        </script>

    <!-- vanillajs-datepicker -->
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>

    <!-- notie -->
    <script src="https://unpkg.com/notie"></script>

    <!-- sweetalert -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <!-- axios-http -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>



    <script>

        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // -----------------------------------------------------------------------------------------

        function myNotify(msg, msgType = 'success') {

            notie.alert({
                type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
                text: msg,
                stay: false, // optional, default = false
                time: 2, // optional, default = 3, minimum = 1,
                position: 'top' // optional, default = 'top', enum: ['top', 'bottom']
            });
        }

        function myNotifyModal(title, html, icon, confirmButtonText) {

            Swal.fire({
                title: title,
                html: html,
                icon: icon,
                confirmButtonText: confirmButtonText
            })
        }
        function myPrompt() {

            // -----------------------------------------------
            // Function to display a toast notification using SweetAlert2
            const toast = (context) => {
                const {
                    title = '',
                    msg = '',
                    footer = '',
                } = context;

                const Toast = Swal.mixin({
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        // Pause timer on mouse enter, resume on mouse leave
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });

                // Display the toast notification
                Toast.fire({
                    icon: "success",
                    title: title,
                    text: msg,
                    footer: footer
                });
            }
            // -----------------------------------------------

            // Function to display a modal message using SweetAlert2
            const modalMsg = (context) => {
                const {
                    title = '',
                    msg = '',
                    footer = '',
                    type = '',
                } = context;

                // Display the modal message
                Swal.fire({
                    icon: type,
                    title: title,
                    text: msg,
                    footer: footer
                });
            }

            // -----------------------------------------------

            // Function to display a custom modal message with date range picker using SweetAlert2
            const customMsg = async (context) => {

                const {
                    title = '',
                    msg = '',
                } = context;

                // Display a custom modal with HTML content and date range picker
                const result = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    
                    willOpen: () => {
                        if (context.functions.willOpen) {
                            context.functions.willOpen();
                        }
                    },
                    didOpen: () => {
                        if (context.functions.didOpen) {
                            context.functions.didOpen();
                        }
                    },
                    preConfirm: () => {
                        if (context.functions.preConfirm) {
                            context.functions.preConfirm();
                        }
                    },
                });

                // Check if a callback function is provided
                if (!context.functions.callBack) {console.log(1); return; }

                // Handle the result of the custom modal
                if (result.value && result.isConfirmed) {


                    const fromDate = result.value[0];
                    const toDate = result.value[1];

                    if (fromDate !== '' && toDate !== '') {

                        // Invoke the callback function with the selected date range
                        context.functions.callBack(result.value);

                        // Swal.fire(JSON.stringify(result.value));  

                    } else {
                        console.log(2)
                        context.functions.callBack(false);
                    }

                } else {
                    console.log(3)
                    context.functions.callBack(false);
                }
            }
            // -----------------------------------------------

            // Return the functions for external use
            return {
                toast: toast,
                modalMsg: modalMsg,
                customMsg: customMsg
            }
        }


    </script>

    {{ block "js" . }}{{ end }}



</body>

</html>
{{ end }}