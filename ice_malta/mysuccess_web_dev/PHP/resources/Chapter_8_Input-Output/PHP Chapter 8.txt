PHP Notes Chapter 8  Input-Output


Files

There are two main groups of functions to deal with files:
	those that start with ‘f’      – functions that work with a file resources, such as fopen(). 
	those that start with ‘file’ – functions that work with a file name, such as file_get_contents().


Opening Files

fopen(
    string $filename,
    string $mode,
    bool $use_include_path = false,	# optional
    resource $context = ?		     	# optional
): resource handle


File Modes
File modes relate to operating system file privileges. For example, if the PHP user only has read access to a file then an attempt to open it in write mode will be denied by the operating system.
If we try with a lesser privilege (such as read only), then the operating system will create a file handle for us.

Mode 		Read/Write 		Pointer 	Behavior                                                                                                             
r 		R 			Start
r+ 		RW 			Start
w 		W 			Start 		Truncates an existing file to zero bytes and overwrite. or 							creates a new file if it doesn’t exist.
w+ 		RW 			Start
a 		W 			End 		Creates a new file if it doesn’t exist and preserves the 							current file if it does.
a+ 		RW 			End		
x 		W 			N/A 		Tries to create a new file for write; returns FALSE if the							file already exists and generates E_WARNING.
x+ 		RW
c 		W 			Start 		Tries to create the file if it doesn’t exist; if it does 								exist, places the cursor at the front of the file.
c+ 		RW


All modes by default  are Write Only, exept for R which is Read Only, by adding + it will change to read & write.

(SAPI) Server Application Programming Interface 
Ex:  Apache HTTP Server, Microsoft IIS, and Oracle iPlanet Web Server

File Mode Flags

There are two flags that you can specify by adding them to the end of the mode string ‘b’  and  ‘t’.
The ‘b’ flag is to specify binary files. This means that no characters will be translated. This is necessary when you’re working with images or other binary files.
The ‘t’ flag is to translate \n to \r\n on a Windows server.
Note: You can either use 'b' or 't' as the last character. For portability, it is strongly recommended that you  re-write code that uses or relies upon the 't' mode so that it uses the correct line endings and  can also use 'b' mode instead.

Reading Files

fread(resource $stream, int $length): string|false
Reads from an open file. It will stop at the end of the file or when it reaches the specified length, whichever comes first.

Source 			Passed 					In Available In
GET 				Parameters in the request URL 		$_GET
POST 				Body of the request 				$_POST
PUT 				Body of the request 				Read with php://input
PATCH 			Body of the request 				Read with php://input
Cookie 			The “cookie” header 				$_COOKIE
Uploaded file 			Body of the request 				$_FILES

If PHP is processing a request from the command line, then $_SERVER['argv'] contains an array of the arguments passed and $_SERVER['argc'] contains the number of arguments that were passed.

PHP can accept data from the environment in which it runs.
You’d be able to reference this in your PHP script using the $_ENV superglobal


Example #1 $_ENV example:

<?php
echo 'My username is ' . $_ENV["USER"] . '!';
?>

//My username is bjori!




getenv(string $varname, bool $local_only = false): string|false

getenv(): array


Example #2  getenv() Example

<?php
$ip = getenv('XDG_CURRENT_DESKTOP');
	?>
	// Budgie:GNOME

The varname can now be omitted to retrieve an associative array of all environment variables.
local_only Set to true to only return local environment variables (set by the operating system or putenv).

putenv(string $assignment): bool
Sets the value of an environment variable


